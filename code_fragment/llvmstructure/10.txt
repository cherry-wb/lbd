class FL<bits<8> op, dag outs, dag ins, string asmstr, list<dag> pattern, 
         InstrItinClass itin>: Cpu0Inst<outs, ins, asmstr, pattern, itin, FrmL>

class Cpu0Inst<dag outs, dag ins, string asmstr, list<dag> pattern, 
               InstrItinClass itin, Format f>: Instruction 
{ 
  field bits<32> Inst; 
  Format Form = f; 

  let Namespace = "Cpu0"; 

  let Size = 4; 

  bits<8> Opcode = 0; 

  // Top 8 bits are the 'opcode' field 
  let Inst{31-24} = Opcode; 

  let OutOperandList = outs; 
  let InOperandList  = ins; 

  let AsmString   = asmstr; 
  let Pattern     = pattern; 
  let Itinerary   = itin; 

  // 
  // Attributes specific to Cpu0 instructions... 
  // 
  bits<4> FormBits = Form.Value; 

  // TSFlags layout should be kept in sync with Cpu0InstrInfo.h. 
  let TSFlags{3-0}   = FormBits; 

  let DecoderNamespace = "Cpu0"; 

  field bits<32> SoftFail = 0; 
}

So,
outs = CPURegs:$ra
ins = CPURegs:$rb,simm16:$imm16
asmstr = "addiu\t$ra, $rb, $imm16"
pattern = [(set CPURegs:$ra, (add RC:$rb, immSExt16:$imm16))]
itin = IIAlu
f =  FrmL

Members are,
Inst{31-24} = 0x09; 
OutOperandList = CPURegs:$ra 
InOperandList  = CPURegs:$rb,simm16:$imm16
AsmString = "addiu\t$ra, $rb, $imm16"
Pattern = [(set CPURegs:$ra, (add RC:$rb, immSExt16:$imm16))]
Itinerary = IIAlu

Summary with all members are, 
// Inherited from parent like Instruction
Namespace = "Cpu0";
DecoderNamespace = "Cpu0";
Inst{31-24} = 0x08; 
Inst{23-20} = CPURegs:$ra; 
Inst{19-16} = CPURegs:$rb; 
Inst{15-0}  = simm16:$imm16; 
OutOperandList = CPURegs:$ra 
InOperandList  = CPURegs:$rb,simm16:$imm16
AsmString = "addiu\t$ra, $rb, $imm16"
Pattern = [(set CPURegs:$ra, (add RC:$rb, immSExt16:$imm16))]
Itinerary = IIAlu
// From Cpu0Inst
Opcode = 0x09;
// From FL
ra = CPURegs:$ra
rb = CPURegs:$rb
imm16 = simm16:$imm16
