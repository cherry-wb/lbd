diff -Naur 4/4/Cpu0/Cpu0FrameLowering.cpp 4/4_2/Cpu0/Cpu0FrameLowering.cpp
--- 4/4/Cpu0/Cpu0FrameLowering.cpp	2013-01-10 18:32:51.000000000 +0800
+++ 4/4_2/Cpu0/Cpu0FrameLowering.cpp	2013-01-10 18:32:51.000000000 +0800
@@ -100,7 +100,7 @@
   MachineBasicBlock::iterator MBBI = MBB.begin();
   DebugLoc dl = MBBI != MBB.end() ? MBBI->getDebugLoc() : DebugLoc();
   unsigned SP = Cpu0::SP;
-  unsigned ADDiu = Cpu0::ADDiu;
+  unsigned LDI = Cpu0::LDI;
   // First, compute final stack size.
   unsigned StackAlign = getStackAlignment();
   unsigned LocalVarAreaOffset = Cpu0FI->getMaxCallFrameSize();
@@ -118,8 +118,13 @@
   MachineLocation DstML, SrcML;
 
   // Adjust stack.
-  if (isInt<16>(-StackSize)) // addiu sp, sp, (-stacksize)
-    BuildMI(MBB, MBBI, dl, TII.get(ADDiu), SP).addReg(SP).addImm(-StackSize);
+  if (isInt<16>(-StackSize)) {
+    // ldi fp, (-stacksize)
+    // add sp, sp, fp
+    BuildMI(MBB, MBBI, dl, TII.get(Cpu0::LDI), Cpu0::FP).addReg(Cpu0::FP).
+        addImm(-StackSize);
+    BuildMI(MBB, MBBI, dl, TII.get(Cpu0::ADD), SP).addReg(SP).addReg(Cpu0::FP);
+  }
   else { // Expand immediate that doesn't fit in 16-bit.
 	assert("No expandLargeImm(SP, -StackSize, false, TII, MBB, MBBI, dl);");
 //    expandLargeImm(SP, -StackSize, false, TII, MBB, MBBI, dl);
@@ -169,7 +174,7 @@
     *static_cast<const Cpu0InstrInfo*>(MF.getTarget().getInstrInfo());
   DebugLoc dl = MBBI->getDebugLoc();
   unsigned SP = Cpu0::SP;
-  unsigned ADDiu = Cpu0::ADDiu;
+  unsigned LDI = Cpu0::LDI;
 
   // Get the number of bytes from FrameInfo
   uint64_t StackSize = MFI->getStackSize();
@@ -178,8 +183,13 @@
     return;
 
   // Adjust stack.
-  if (isInt<16>(StackSize)) // addiu sp, sp, (stacksize)
-    BuildMI(MBB, MBBI, dl, TII.get(ADDiu), SP).addReg(SP).addImm(StackSize);
+  if (isInt<16>(StackSize)) {
+    // ldi fp, (stacksize)
+    // add sp, sp, fp
+    BuildMI(MBB, MBBI, dl, TII.get(Cpu0::LDI), Cpu0::FP).addReg(Cpu0::FP).
+        addImm(StackSize);
+    BuildMI(MBB, MBBI, dl, TII.get(Cpu0::ADD), SP).addReg(SP).addReg(Cpu0::FP);
+  }
   else // Expand immediate that doesn't fit in 16-bit.
 	assert("No expandLargeImm(SP, StackSize, false, TII, MBB, MBBI, dl);");
 //    expandLargeImm(SP, StackSize, false, TII, MBB, MBBI, dl);
diff -Naur 4/4/Cpu0/Cpu0InstrInfo.td 4/4_2/Cpu0/Cpu0InstrInfo.td
--- 4/4/Cpu0/Cpu0InstrInfo.td	2013-01-10 18:32:51.000000000 +0800
+++ 4/4_2/Cpu0/Cpu0InstrInfo.td	2013-01-10 18:32:51.000000000 +0800
@@ -196,9 +196,9 @@
 defm ST     : StoreM32<0x01, "st",  store_a>;
 
 /// Arithmetic Instructions (ALU Immediate)
-//def LDI     : MoveImm<0x08, "ldi", add, simm16, immSExt16, CPURegs>;
+def LDI     : MoveImm<0x08, "ldi", add, simm16, immSExt16, CPURegs>;
 // add defined in include/llvm/Target/TargetSelectionDAG.td, line 315 (def add).
-def ADDiu   : ArithLogicI<0x09, "addiu", add, simm16, immSExt16, CPURegs>;
+//def ADDiu   : ArithLogicI<0x09, "addiu", add, simm16, immSExt16, CPURegs>;
 
 /// Arithmetic Instructions (3-Operand, R-Type)
 def CMP		: CmpInstr<0x10, "cmp", IIAlu, CPURegs, 1>;
@@ -232,15 +232,15 @@
 // Small immediates
 
 def : Pat<(i32 immSExt16:$in),
-          (ADDiu ZERO, imm:$in)>;
+          (LDI ZERO, imm:$in)>;
 
 def : Pat<(not CPURegs:$in),
-          (XOR CPURegs:$in, (ADDiu ZERO, 1))>;
+          (XOR CPURegs:$in, (LDI ZERO, 1))>;
 
 // setcc patterns
 multiclass SeteqPats<RegisterClass RC, Instruction XOROp> {
   def : Pat<(seteq RC:$lhs, RC:$rhs),
-            (XOROp (XOROp RC:$lhs, RC:$rhs), (ADDiu ZERO, 1))>;
+            (XOROp (XOROp RC:$lhs, RC:$rhs), (LDI ZERO, 1))>;
 }
 
 defm : SeteqPats<CPURegs, XOR>;
