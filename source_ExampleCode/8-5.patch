diff -Naur 8/4/Cpu0/Cpu0InstrInfo.cpp 8/5/Cpu0/Cpu0InstrInfo.cpp
--- 8/4/Cpu0/Cpu0InstrInfo.cpp	2013-01-10 18:32:51.000000000 +0800
+++ 8/5/Cpu0/Cpu0InstrInfo.cpp	2013-01-10 18:32:51.000000000 +0800
@@ -21,7 +21,7 @@
 using namespace llvm;
 
 Cpu0InstrInfo::Cpu0InstrInfo(Cpu0TargetMachine &tm)
-  : 
+  : Cpu0GenInstrInfo(Cpu0::ADJCALLSTACKDOWN, Cpu0::ADJCALLSTACKUP),
     TM(tm),
     RI(*TM.getSubtargetImpl(), *this) {}
 
diff -Naur 8/4/Cpu0/Cpu0RegisterInfo.cpp 8/5/Cpu0/Cpu0RegisterInfo.cpp
--- 8/4/Cpu0/Cpu0RegisterInfo.cpp	2013-01-10 18:32:51.000000000 +0800
+++ 8/5/Cpu0/Cpu0RegisterInfo.cpp	2013-01-10 18:32:51.000000000 +0800
@@ -86,6 +86,15 @@
   return Reserved;
 }
 
+// This function eliminate ADJCALLSTACKDOWN,
+// ADJCALLSTACKUP pseudo instructions
+void Cpu0RegisterInfo::
+eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,
+                              MachineBasicBlock::iterator I) const {
+  // Simply discard ADJCALLSTACKDOWN, ADJCALLSTACKUP instructions.
+  MBB.erase(I);
+}
+
 //- If eliminateFrameIndex() is empty, it will hang on run. 
 // pure virtual method
 // FrameIndex represent objects inside a abstract stack.
diff -Naur 8/4/Cpu0/Cpu0RegisterInfo.h 8/5/Cpu0/Cpu0RegisterInfo.h
--- 8/4/Cpu0/Cpu0RegisterInfo.h	2013-01-10 18:32:51.000000000 +0800
+++ 8/5/Cpu0/Cpu0RegisterInfo.h	2013-01-10 18:32:51.000000000 +0800
@@ -42,6 +42,10 @@
 // pure virtual method
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void eliminateCallFramePseudoInstr(MachineFunction &MF,
+                                     MachineBasicBlock &MBB,
+                                     MachineBasicBlock::iterator I) const;
+
 // pure virtual method
   /// Stack Frame Processing Methods
   void eliminateFrameIndex(MachineBasicBlock::iterator II,
