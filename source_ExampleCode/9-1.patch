diff -Naur 8/7/Cpu0/Cpu0AsmPrinter.cpp 9/1/Cpu0/Cpu0AsmPrinter.cpp
--- 8/7/Cpu0/Cpu0AsmPrinter.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0AsmPrinter.cpp	2013-01-11 21:33:22.000000000 +0800
@@ -21,7 +21,6 @@
 #include "llvm/ADT/SmallString.h"
 #include "llvm/ADT/StringExtras.h"
 #include "llvm/ADT/Twine.h"
-#include "llvm/Analysis/DebugInfo.h"
 #include "llvm/BasicBlock.h"
 #include "llvm/Instructions.h"
 #include "llvm/CodeGen/MachineFunctionPass.h"
@@ -37,7 +36,7 @@
 #include "llvm/Support/TargetRegistry.h"
 #include "llvm/Support/raw_ostream.h"
 #include "llvm/Target/Mangler.h"
-#include "llvm/Target/TargetData.h"
+#include "llvm/DataLayout.h"
 #include "llvm/Target/TargetLoweringObjectFile.h"
 #include "llvm/Target/TargetOptions.h"
 
@@ -157,7 +156,7 @@
   const MachineFrameInfo *MFI = MF->getFrameInfo();
   const std::vector<CalleeSavedInfo> &CSI = MFI->getCalleeSavedInfo();
   // size of stack area to which FP callee-saved regs are saved.
-  unsigned CPURegSize = Cpu0::CPURegsRegisterClass->getSize();
+  unsigned CPURegSize = Cpu0::CPURegsRegClass.getSize();
   unsigned i = 0, e = CSI.size();
 
   // Set CPU Bitmask.
diff -Naur 8/7/Cpu0/Cpu0FrameLowering.cpp 9/1/Cpu0/Cpu0FrameLowering.cpp
--- 8/7/Cpu0/Cpu0FrameLowering.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0FrameLowering.cpp	2013-01-12 11:40:54.000000000 +0800
@@ -21,7 +21,7 @@
 #include "llvm/CodeGen/MachineInstrBuilder.h"
 #include "llvm/CodeGen/MachineModuleInfo.h"
 #include "llvm/CodeGen/MachineRegisterInfo.h"
-#include "llvm/Target/TargetData.h"
+#include "llvm/DataLayout.h"
 #include "llvm/Target/TargetOptions.h"
 #include "llvm/Support/CommandLine.h"
 
diff -Naur 8/7/Cpu0/Cpu0ISelLowering.cpp 9/1/Cpu0/Cpu0ISelLowering.cpp
--- 8/7/Cpu0/Cpu0ISelLowering.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0ISelLowering.cpp	2013-01-12 11:46:16.000000000 +0800
@@ -62,7 +62,7 @@
     Subtarget(&TM.getSubtarget<Cpu0Subtarget>()) {
 
   // Set up the register classes
-  addRegisterClass(MVT::i32, Cpu0::CPURegsRegisterClass);
+  addRegisterClass(MVT::i32, &Cpu0::CPURegsRegClass);
 
   // Used by legalize types to correctly generate the setcc result.
   // Without this, every float setcc comes with a AND/OR with the result,
@@ -243,16 +243,18 @@
 #include "Cpu0GenCallingConv.inc"
 
 SDValue
-Cpu0TargetLowering::LowerCall(SDValue InChain, SDValue Callee,
-                              CallingConv::ID CallConv, bool isVarArg,
-                              bool doesNotRet, bool &isTailCall,
-                              const SmallVectorImpl<ISD::OutputArg> &Outs,
-                              const SmallVectorImpl<SDValue> &OutVals,
-                              const SmallVectorImpl<ISD::InputArg> &Ins,
-                              DebugLoc dl, SelectionDAG &DAG,
+Cpu0TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,
                               SmallVectorImpl<SDValue> &InVals) const {
-  // Cpu0 target does not yet support tail call optimization.
-  isTailCall = false;
+  SelectionDAG &DAG                     = CLI.DAG;
+  DebugLoc &dl                          = CLI.DL;
+  SmallVector<ISD::OutputArg, 32> &Outs = CLI.Outs;
+  SmallVector<SDValue, 32> &OutVals     = CLI.OutVals;
+  SmallVector<ISD::InputArg, 32> &Ins   = CLI.Ins;
+  SDValue InChain                       = CLI.Chain;
+  SDValue Callee                        = CLI.Callee;
+  bool &isTailCall                      = CLI.IsTailCall;
+  CallingConv::ID CallConv              = CLI.CallConv;
+  bool isVarArg                         = CLI.IsVarArg;
 
   MachineFunction &MF = DAG.getMachineFunction();
   MachineFrameInfo *MFI = MF.getFrameInfo();
diff -Naur 8/7/Cpu0/Cpu0ISelLowering.h 9/1/Cpu0/Cpu0ISelLowering.h
--- 8/7/Cpu0/Cpu0ISelLowering.h	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0ISelLowering.h	2013-01-11 20:55:06.000000000 +0800
@@ -97,13 +97,7 @@
                            SmallVectorImpl<SDValue> &InVals) const;
                            
     virtual SDValue
-      LowerCall(SDValue Chain, SDValue Callee,
-                CallingConv::ID CallConv, bool isVarArg,
-                bool doesNotRet, bool &isTailCall,
-                const SmallVectorImpl<ISD::OutputArg> &Outs,
-                const SmallVectorImpl<SDValue> &OutVals,
-                const SmallVectorImpl<ISD::InputArg> &Ins,
-                DebugLoc dl, SelectionDAG &DAG,
+      LowerCall(TargetLowering::CallLoweringInfo &CLI,
                 SmallVectorImpl<SDValue> &InVals) const;
 
 	//- must be exist without function all
diff -Naur 8/7/Cpu0/Cpu0InstrInfo.cpp 9/1/Cpu0/Cpu0InstrInfo.cpp
--- 8/7/Cpu0/Cpu0InstrInfo.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0InstrInfo.cpp	2013-01-12 10:43:30.000000000 +0800
@@ -87,7 +87,7 @@
 
   unsigned Opc = 0;
 
-  if (RC == Cpu0::CPURegsRegisterClass)
+  if (Cpu0::CPURegsRegClass.hasSubClassEq(RC))
     Opc = Cpu0::ST;
   assert(Opc && "Register class not handled!");
   BuildMI(MBB, I, DL, get(Opc)).addReg(SrcReg, getKillRegState(isKill))
@@ -105,7 +105,7 @@
   MachineMemOperand *MMO = GetMemOperand(MBB, FI, MachineMemOperand::MOLoad);
   unsigned Opc = 0;
 
-  if (RC == Cpu0::CPURegsRegisterClass)
+  if (Cpu0::CPURegsRegClass.hasSubClassEq(RC))
     Opc = Cpu0::LD;
   assert(Opc && "Register class not handled!");
   BuildMI(MBB, I, DL, get(Opc), DestReg).addFrameIndex(FI).addImm(0)
diff -Naur 8/7/Cpu0/Cpu0MachineFunction.cpp 9/1/Cpu0/Cpu0MachineFunction.cpp
--- 8/7/Cpu0/Cpu0MachineFunction.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0MachineFunction.cpp	2013-01-11 21:55:37.000000000 +0800
@@ -36,7 +36,7 @@
     return GlobalBaseReg = Cpu0::GP;
 
   const TargetRegisterClass *RC;
-  RC = Cpu0::CPURegsRegisterClass;
+  RC = (const TargetRegisterClass*)&Cpu0::CPURegsRegClass;
 
   return GlobalBaseReg = MF.getRegInfo().createVirtualRegister(RC);
 }
diff -Naur 8/7/Cpu0/Cpu0RegisterInfo.cpp 9/1/Cpu0/Cpu0RegisterInfo.cpp
--- 8/7/Cpu0/Cpu0RegisterInfo.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0RegisterInfo.cpp	2013-01-11 21:57:11.000000000 +0800
@@ -18,6 +18,7 @@
 #include "Cpu0Subtarget.h"
 #include "Cpu0MachineFunction.h"
 #include "llvm/Constants.h"
+#include "llvm/DebugInfo.h"
 #include "llvm/Type.h"
 #include "llvm/Function.h"
 #include "llvm/CodeGen/ValueTypes.h"
@@ -34,7 +35,6 @@
 #include "llvm/Support/raw_ostream.h"
 #include "llvm/ADT/BitVector.h"
 #include "llvm/ADT/STLExtras.h"
-#include "llvm/Analysis/DebugInfo.h"
 
 #define GET_REGINFO_TARGET_DESC
 #include "Cpu0GenRegisterInfo.inc"
diff -Naur 8/7/Cpu0/Cpu0TargetMachine.cpp 9/1/Cpu0/Cpu0TargetMachine.cpp
--- 8/7/Cpu0/Cpu0TargetMachine.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0TargetMachine.cpp	2013-01-11 22:10:11.000000000 +0800
@@ -42,7 +42,7 @@
   //- Default is big endian
   : LLVMTargetMachine(T, TT, CPU, FS, Options, RM, CM, OL),
     Subtarget(TT, CPU, FS, isLittle),
-    DataLayout(isLittle ?
+    DL(isLittle ?
                ("e-p:32:32:32-i8:8:32-i16:16:32-i64:64:64-n32") :
                ("E-p:32:32:32-i8:8:32-i16:16:32-i64:64:64-n32")),
     InstrInfo(*this),
@@ -93,7 +93,7 @@
 // Install an instruction selector pass using
 // the ISelDag to gen Cpu0 code.
 bool Cpu0PassConfig::addInstSelector() {
-  PM->add(createCpu0ISelDag(getCpu0TargetMachine()));
+  addPass(createCpu0ISelDag(getCpu0TargetMachine()));
   return false;
 }
 
@@ -101,6 +101,6 @@
   // Do not restore $gp if target is Cpu064.
   // In N32/64, $gp is a callee-saved register.
 
-    PM->add(createCpu0EmitGPRestorePass(getCpu0TargetMachine()));
+    addPass(createCpu0EmitGPRestorePass(getCpu0TargetMachine()));
   return true;
 }
diff -Naur 8/7/Cpu0/Cpu0TargetMachine.h 9/1/Cpu0/Cpu0TargetMachine.h
--- 8/7/Cpu0/Cpu0TargetMachine.h	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0TargetMachine.h	2013-01-12 11:38:36.000000000 +0800
@@ -20,7 +20,7 @@
 #include "Cpu0SelectionDAGInfo.h"
 #include "Cpu0Subtarget.h"
 #include "llvm/Target/TargetMachine.h"
-#include "llvm/Target/TargetData.h"
+#include "llvm/DataLayout.h"
 #include "llvm/Target/TargetFrameLowering.h"
 
 namespace llvm {
@@ -28,7 +28,7 @@
 
   class Cpu0TargetMachine : public LLVMTargetMachine {
     Cpu0Subtarget       Subtarget;
-    const TargetData    DataLayout; // Calculates type size & alignment
+    const DataLayout    DL; // Calculates type size & alignment
     Cpu0InstrInfo       InstrInfo;	//- Instructions
     Cpu0FrameLowering   FrameLowering;	//- Stack(Frame) and Stack direction
     Cpu0TargetLowering  TLInfo;	//- Stack(Frame) and Stack direction
@@ -47,9 +47,8 @@
     { return &FrameLowering; }
     virtual const Cpu0Subtarget   *getSubtargetImpl() const
     { return &Subtarget; }
-    virtual const TargetData      *getTargetData()    const
-    { return &DataLayout;}
-
+    virtual const DataLayout *getDataLayout()    const
+    { return &DL;}
     virtual const Cpu0RegisterInfo *getRegisterInfo()  const {
       return &InstrInfo.getRegisterInfo();
     }
diff -Naur 8/7/Cpu0/Cpu0TargetObjectFile.cpp 9/1/Cpu0/Cpu0TargetObjectFile.cpp
--- 8/7/Cpu0/Cpu0TargetObjectFile.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/Cpu0TargetObjectFile.cpp	2013-01-11 22:02:23.000000000 +0800
@@ -13,7 +13,7 @@
 #include "llvm/GlobalVariable.h"
 #include "llvm/MC/MCContext.h"
 #include "llvm/MC/MCSectionELF.h"
-#include "llvm/Target/TargetData.h"
+#include "llvm/DataLayout.h"
 #include "llvm/Target/TargetMachine.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/ELF.h"
@@ -80,7 +80,7 @@
     return false;
 
   Type *Ty = GV->getType()->getElementType();
-  return IsInSmallSection(TM.getTargetData()->getTypeAllocSize(Ty));
+  return IsInSmallSection(TM.getDataLayout()->getTypeAllocSize(Ty));
 }
 
 
diff -Naur 8/7/Cpu0/MCTargetDesc/Cpu0AsmBackend.cpp 9/1/Cpu0/MCTargetDesc/Cpu0AsmBackend.cpp
--- 8/7/Cpu0/MCTargetDesc/Cpu0AsmBackend.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/MCTargetDesc/Cpu0AsmBackend.cpp	2013-01-12 12:42:44.000000000 +0800
@@ -67,7 +67,14 @@
     :MCAsmBackend(), OSType(_OSType), IsLittle(_isLittle) {}
 
   MCObjectWriter *createObjectWriter(raw_ostream &OS) const {
-    return createCpu0ELFObjectWriter(OS, OSType, IsLittle);
+  // Change Reason:
+  // Reduce the exposure of Triple::OSType in the ELF object writer. This will
+  //  avoid including ADT/Triple.h in many places when the target specific bits 
+  //  are moved.
+    return createCpu0ELFObjectWriter(OS,
+      MCELFObjectTargetWriter::getOSABI(OSType), IsLittle);
+// Even though, the old function still work on LLVM version 3.2
+//    return createCpu0ELFObjectWriter(OS, OSType, IsLittle);
   }
 
   /// ApplyFixup - Apply the \arg Value for given \arg Fixup into the provided
@@ -203,12 +210,14 @@
 } // namespace
 
 // MCAsmBackend
-MCAsmBackend *llvm::createCpu0AsmBackendEL32(const Target &T, StringRef TT) {
+MCAsmBackend *llvm::createCpu0AsmBackendEL32(const Target &T, StringRef TT,
+                                             StringRef CPU) {
   return new Cpu0AsmBackend(T, Triple(TT).getOS(),
                             /*IsLittle*/true);
 }
 
-MCAsmBackend *llvm::createCpu0AsmBackendEB32(const Target &T, StringRef TT) {
+MCAsmBackend *llvm::createCpu0AsmBackendEB32(const Target &T, StringRef TT,
+                                             StringRef CPU) {
   return new Cpu0AsmBackend(T, Triple(TT).getOS(),
                             /*IsLittle*/false);
 }
diff -Naur 8/7/Cpu0/MCTargetDesc/Cpu0MCCodeEmitter.cpp 9/1/Cpu0/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- 8/7/Cpu0/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-01-12 12:47:04.000000000 +0800
@@ -29,8 +29,19 @@
 
 namespace {
 class Cpu0MCCodeEmitter : public MCCodeEmitter {
-  Cpu0MCCodeEmitter(const Cpu0MCCodeEmitter &); // DO NOT IMPLEMENT
-  void operator=(const Cpu0MCCodeEmitter &); // DO NOT IMPLEMENT
+  // #define LLVM_DELETED_FUNCTION
+  //  LLVM_DELETED_FUNCTION - Expands to = delete if the compiler supports it. 
+  //  Use to mark functions as uncallable. Member functions with this should be 
+  //  declared private so that some behavior is kept in C++03 mode.
+  //  class DontCopy { private: DontCopy(const DontCopy&) LLVM_DELETED_FUNCTION;
+  //  DontCopy &operator =(const DontCopy&) LLVM_DELETED_FUNCTION; public: ... };
+  //  Definition at line 79 of file Compiler.h.
+
+  Cpu0MCCodeEmitter(const Cpu0MCCodeEmitter &) LLVM_DELETED_FUNCTION;
+  void operator=(const Cpu0MCCodeEmitter &) LLVM_DELETED_FUNCTION;
+// Even though, the old function still work on LLVM version 3.2
+//  Cpu0MCCodeEmitter(const Cpu0MCCodeEmitter &); // DO NOT IMPLEMENT
+//  void operator=(const Cpu0MCCodeEmitter &); // DO NOT IMPLEMENT
   const MCInstrInfo &MCII;
   const MCSubtargetInfo &STI;
   MCContext &Ctx;
@@ -86,6 +97,7 @@
 }  // namespace
 
 MCCodeEmitter *llvm::createCpu0MCCodeEmitterEB(const MCInstrInfo &MCII,
+                                               const MCRegisterInfo &MRI,
                                                const MCSubtargetInfo &STI,
                                                MCContext &Ctx)
 {
@@ -93,6 +105,7 @@
 }
 
 MCCodeEmitter *llvm::createCpu0MCCodeEmitterEL(const MCInstrInfo &MCII,
+                                               const MCRegisterInfo &MRI,
                                                const MCSubtargetInfo &STI,
                                                MCContext &Ctx)
 {
diff -Naur 8/7/Cpu0/MCTargetDesc/Cpu0MCTargetDesc.h 9/1/Cpu0/MCTargetDesc/Cpu0MCTargetDesc.h
--- 8/7/Cpu0/MCTargetDesc/Cpu0MCTargetDesc.h	2013-01-11 19:16:23.000000000 +0800
+++ 9/1/Cpu0/MCTargetDesc/Cpu0MCTargetDesc.h	2013-01-11 21:12:39.000000000 +0800
@@ -22,6 +22,7 @@
 class MCContext;
 class MCInstrInfo;
 class MCObjectWriter;
+class MCRegisterInfo;
 class MCSubtargetInfo;
 class StringRef;
 class Target;
@@ -31,14 +32,18 @@
 extern Target TheCpu0elTarget;
 
 MCCodeEmitter *createCpu0MCCodeEmitterEB(const MCInstrInfo &MCII,
+                                         const MCRegisterInfo &MRI,
                                          const MCSubtargetInfo &STI,
                                          MCContext &Ctx);
 MCCodeEmitter *createCpu0MCCodeEmitterEL(const MCInstrInfo &MCII,
+                                         const MCRegisterInfo &MRI,
                                          const MCSubtargetInfo &STI,
                                          MCContext &Ctx);
 
-MCAsmBackend *createCpu0AsmBackendEB32(const Target &T, StringRef TT);
-MCAsmBackend *createCpu0AsmBackendEL32(const Target &T, StringRef TT);
+MCAsmBackend *createCpu0AsmBackendEB32(const Target &T, StringRef TT,
+                                       StringRef CPU);
+MCAsmBackend *createCpu0AsmBackendEL32(const Target &T, StringRef TT,
+                                       StringRef CPU);
 
 MCObjectWriter *createCpu0ELFObjectWriter(raw_ostream &OS,
                                           uint8_t OSABI,
