diff -Naur 3/1/Cpu0/CMakeLists.txt 3/2/Cpu0/CMakeLists.txt
--- 3/1/Cpu0/CMakeLists.txt	2013-01-10 18:32:51.000000000 +0800
+++ 3/2/Cpu0/CMakeLists.txt	2013-01-10 18:32:51.000000000 +0800
@@ -21,6 +21,7 @@
   Cpu0ISelLowering.cpp
   Cpu0InstrInfo.cpp
   Cpu0FrameLowering.cpp
+  Cpu0RegisterInfo.cpp
   Cpu0Subtarget.cpp
   Cpu0TargetMachine.cpp
   Cpu0SelectionDAGInfo.cpp
diff -Naur 3/1/Cpu0/Cpu0InstrInfo.cpp 3/2/Cpu0/Cpu0InstrInfo.cpp
--- 3/1/Cpu0/Cpu0InstrInfo.cpp	2013-01-10 18:32:51.000000000 +0800
+++ 3/2/Cpu0/Cpu0InstrInfo.cpp	2013-01-10 18:32:51.000000000 +0800
@@ -20,5 +20,10 @@
 
 Cpu0InstrInfo::Cpu0InstrInfo(Cpu0TargetMachine &tm)
   : 
-    TM(tm)
-    {}
+    TM(tm),
+    RI(*TM.getSubtargetImpl(), *this) {}
+
+const Cpu0RegisterInfo &Cpu0InstrInfo::getRegisterInfo() const {
+  return RI;
+}
+
diff -Naur 3/1/Cpu0/Cpu0InstrInfo.h 3/2/Cpu0/Cpu0InstrInfo.h
--- 3/1/Cpu0/Cpu0InstrInfo.h	2013-01-10 18:32:51.000000000 +0800
+++ 3/2/Cpu0/Cpu0InstrInfo.h	2013-01-10 18:32:51.000000000 +0800
@@ -15,6 +15,7 @@
 #define CPU0INSTRUCTIONINFO_H
 
 #include "Cpu0.h"
+#include "Cpu0RegisterInfo.h"
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Target/TargetInstrInfo.h"
 
@@ -25,8 +26,17 @@
 
 class Cpu0InstrInfo : public Cpu0GenInstrInfo {
   Cpu0TargetMachine &TM;
+  const Cpu0RegisterInfo RI;
 public:
   explicit Cpu0InstrInfo(Cpu0TargetMachine &TM);
+
+  /// getRegisterInfo - TargetInstrInfo is a superset of MRegister info.  As
+  /// such, whenever a client has an instance of instruction info, it should
+  /// always be able to get register info as well (through this method).
+  ///
+  virtual const Cpu0RegisterInfo &getRegisterInfo() const;
+
+public:
 };
 }
 
diff -Naur 3/1/Cpu0/Cpu0RegisterInfo.cpp 3/2/Cpu0/Cpu0RegisterInfo.cpp
--- 3/1/Cpu0/Cpu0RegisterInfo.cpp	1970-01-01 08:00:00.000000000 +0800
+++ 3/2/Cpu0/Cpu0RegisterInfo.cpp	2013-01-10 18:32:51.000000000 +0800
@@ -0,0 +1,100 @@
+//===-- Cpu0RegisterInfo.cpp - CPU0 Register Information -== --------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file contains the CPU0 implementation of the TargetRegisterInfo class.
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "cpu0-reg-info"
+
+#include "Cpu0RegisterInfo.h"
+#include "Cpu0.h"
+#include "Cpu0Subtarget.h"
+#include "Cpu0MachineFunction.h"
+#include "llvm/Constants.h"
+#include "llvm/Type.h"
+#include "llvm/Function.h"
+#include "llvm/CodeGen/ValueTypes.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
+#include "llvm/CodeGen/MachineFunction.h"
+#include "llvm/CodeGen/MachineFrameInfo.h"
+#include "llvm/Target/TargetFrameLowering.h"
+#include "llvm/Target/TargetMachine.h"
+#include "llvm/Target/TargetOptions.h"
+#include "llvm/Target/TargetInstrInfo.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/ADT/BitVector.h"
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/Analysis/DebugInfo.h"
+
+#define GET_REGINFO_TARGET_DESC
+#include "Cpu0GenRegisterInfo.inc"
+
+using namespace llvm;
+
+Cpu0RegisterInfo::Cpu0RegisterInfo(const Cpu0Subtarget &ST,
+                                   const TargetInstrInfo &tii)
+  : Cpu0GenRegisterInfo(Cpu0::LR), Subtarget(ST), TII(tii) {}
+
+//===----------------------------------------------------------------------===//
+// Callee Saved Registers methods
+//===----------------------------------------------------------------------===//
+/// Cpu0 Callee Saved Registers
+// In Cpu0CallConv.td,
+// def CSR_O32 : CalleeSavedRegs<(add LR, FP,
+//                                   (sequence "S%u", 2, 0))>;
+// llc create CSR_O32_SaveList and CSR_O32_RegMask from above defined.
+const uint16_t* Cpu0RegisterInfo::
+getCalleeSavedRegs(const MachineFunction *MF) const
+{
+  return CSR_O32_SaveList;
+}
+
+const uint32_t*
+Cpu0RegisterInfo::getCallPreservedMask(CallingConv::ID) const
+{
+  return CSR_O32_RegMask; 
+}
+
+// pure virtual method
+BitVector Cpu0RegisterInfo::
+getReservedRegs(const MachineFunction &MF) const {
+  static const uint16_t ReservedCPURegs[] = {
+    Cpu0::ZERO, Cpu0::AT, Cpu0::FP,
+    Cpu0::SW, Cpu0::SP, Cpu0::LR, Cpu0::PC
+  };
+  BitVector Reserved(getNumRegs());
+  typedef TargetRegisterClass::iterator RegIter;
+
+  for (unsigned I = 0; I < array_lengthof(ReservedCPURegs); ++I)
+    Reserved.set(ReservedCPURegs[I]);
+
+  return Reserved;
+}
+
+// pure virtual method
+// FrameIndex represent objects inside a abstract stack.
+// We must replace FrameIndex with an stack/frame pointer
+// direct reference.
+void Cpu0RegisterInfo::
+eliminateFrameIndex(MachineBasicBlock::iterator II, int SPAdj,
+                    RegScavenger *RS) const {
+}
+
+// pure virtual method
+unsigned Cpu0RegisterInfo::
+getFrameRegister(const MachineFunction &MF) const {
+  const TargetFrameLowering *TFI = MF.getTarget().getFrameLowering();
+  return TFI->hasFP(MF) ? (Cpu0::FP) :
+                          (Cpu0::SP);
+}
+
diff -Naur 3/1/Cpu0/Cpu0RegisterInfo.h 3/2/Cpu0/Cpu0RegisterInfo.h
--- 3/1/Cpu0/Cpu0RegisterInfo.h	1970-01-01 08:00:00.000000000 +0800
+++ 3/2/Cpu0/Cpu0RegisterInfo.h	2013-01-10 18:32:51.000000000 +0800
@@ -0,0 +1,57 @@
+//===-- Cpu0RegisterInfo.h - Cpu0 Register Information Impl -----*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file contains the Cpu0 implementation of the TargetRegisterInfo class.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef CPU0REGISTERINFO_H
+#define CPU0REGISTERINFO_H
+
+#include "Cpu0.h"
+#include "llvm/Target/TargetRegisterInfo.h"
+
+#define GET_REGINFO_HEADER
+#include "Cpu0GenRegisterInfo.inc"
+
+namespace llvm {
+class Cpu0Subtarget;
+class TargetInstrInfo;
+class Type;
+
+struct Cpu0RegisterInfo : public Cpu0GenRegisterInfo {
+  const Cpu0Subtarget &Subtarget;
+  const TargetInstrInfo &TII;
+
+  Cpu0RegisterInfo(const Cpu0Subtarget &Subtarget, const TargetInstrInfo &tii);
+
+  /// getRegisterNumbering - Given the enum value for some register, e.g.
+  /// Cpu0::RA, return the number that it corresponds to (e.g. 31).
+  static unsigned getRegisterNumbering(unsigned RegEnum);
+
+  /// Code Generation virtual methods...
+  const uint16_t *getCalleeSavedRegs(const MachineFunction* MF = 0) const;
+  const uint32_t *getCallPreservedMask(CallingConv::ID) const;
+
+// pure virtual method
+  BitVector getReservedRegs(const MachineFunction &MF) const;
+
+// pure virtual method
+  /// Stack Frame Processing Methods
+  void eliminateFrameIndex(MachineBasicBlock::iterator II,
+                           int SPAdj, RegScavenger *RS = NULL) const;
+
+// pure virtual method
+  /// Debug information queries.
+  unsigned getFrameRegister(const MachineFunction &MF) const;
+};
+
+} // end namespace llvm
+
+#endif
diff -Naur 3/1/Cpu0/Cpu0TargetMachine.h 3/2/Cpu0/Cpu0TargetMachine.h
--- 3/1/Cpu0/Cpu0TargetMachine.h	2013-01-10 18:32:51.000000000 +0800
+++ 3/2/Cpu0/Cpu0TargetMachine.h	2013-01-10 18:32:51.000000000 +0800
@@ -50,6 +50,10 @@
     virtual const TargetData      *getTargetData()    const
     { return &DataLayout;}
 
+    virtual const Cpu0RegisterInfo *getRegisterInfo()  const {
+      return &InstrInfo.getRegisterInfo();
+    }
+
     virtual const Cpu0TargetLowering *getTargetLowering() const {
       return &TLInfo;
     }
